<%=
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end

  def mapping
    {
      's' => 'seconds',
      'm' => 'minutes',
    }
  end

  def multiplier(unit)
    case unit
    when 'minutes' ; 60
    when 'seconds' ; 1
    else           ; 1
    end
  end

  def parse_time(duration)
    # Fixnum is deprecated in Ruby 2.4, so...
    return duration if duration.is_a?(1.class)

    clean  = duration.gsub(/\s/, '')
    digits = clean.to_i
    unit   = mapping[clean.sub("#{digits}", '')]
    digits * multiplier(unit)
  end

  def confab
    input = p('confab')
    if input && input['timeout']
      { 'confab': { 'timeout_in_seconds': parse_time(input['timeout']) } }
    else
      {}
    end
  end

  def consul
    config = p('consul')
    if config['agent']['node_name_includes_id']
      config['agent']['node_name'] = "#{spec.name}-#{spec.id}"
    end
    config
  end

  confab.merge({
    node: {
      name: name,
      index: spec.index,
      external_ip: discover_external_ip,
      zone: spec.az,
    },
    consul: consul,
  }).to_json
%>
